import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.swing.JOptionPane;

public class Server {

	HashMap<String, DataOutputStream> map;
	ServerSocket server;

	// 채팅내용 저장됨
	static PrintWriter pw;
	static String chatstr;

	// 피싱방지용 파일
	FileReader fr;
	BufferedReader br;

	List<String> array = new ArrayList();

	Server() {
		map = new HashMap<String, DataOutputStream>();
		Collections.synchronizedMap(map); // 스레드관련동기화

		// 파일 열기
		try {
			pw = new PrintWriter(new FileOutputStream("c:/temp/chat.txt"), true);

			// 파일 --> 배열에 읽기
			fr = new FileReader("c:/temp/phishing.txt");
			br = new BufferedReader(fr);
			String tmp;
			while ((tmp = br.readLine()) != null) { // 널이 아닐때 까지 배열에 저장시켜라
				array.add(tmp);
			}

			br.close();
			fr.close();
		} catch (Exception e) {
		}

	}

	public static void main(String[] args) throws Exception {

		Server myServer = new Server();
		myServer.startServer();
	}

	void startServer() throws Exception {
		Socket client;
		server = new ServerSocket(10001);
		System.out.println("멀티채팅방 개설됨");
		while (true) {
			client = server.accept();
			ServerReciver reciver = new ServerReciver(client);
			reciver.start();

		}

	}

	class ServerReciver extends Thread {

		private String contents = "";

		public String contentsFilter(String strContents) {

			return this.contents;

		}

		Socket socket;
		DataInputStream input;
		DataOutputStream output;

		ServerReciver(Socket client) throws Exception {
			this.socket = client;
			input = new DataInputStream(socket.getInputStream());
			output = new DataOutputStream(socket.getOutputStream());
		}

		public void run() {

			String name = "";
			try {

				name = input.readUTF();
				Iterator<String> user = map.keySet().iterator();

				if (map.containsKey(name)) {
					JOptionPane.showMessageDialog(null, "중복된 아이디 입니다. \n 다시 실행해주세요");
					socket.close();

				}

				sendToAll(name + "님이 접속했습니다.");

				// 파일에 쓰기
				chatstr = name + "[" + socket.getInetAddress() + ":" + socket.getPort() + "]" + " 님이 접속했습니다.";
				pw.println(chatstr);

				// 테이블에 접속 사용자 추가
				map.put(name, output);

				// 서버에현재사용자인원수출력(옵션)
				System.out.println("현재 " + map.size() + "명이 채팅중.."); // size는해쉬맵이몇개인지자동으로새줌
				System.out.print("현재접속자 : ");
				Iterator<String> nameIt = map.keySet().iterator();

				while (nameIt.hasNext()) {

					String str = nameIt.next();
					output.writeUTF(str + " ");
					System.out.print(str + " ");

				}

				System.out.println("");
				// 접속자의대화를계속모든사용자에게전송..
				while (input != null) {
					sendToAll(input.readUTF());
				}

			} catch (Exception e) {
			} finally {
				map.remove(name);
				sendToAll(name + "님이 나갔습니다.");
				// 파일에 쓰기
				chatstr = name + "[" + socket.getInetAddress() + ":" + socket.getPort() + "]" + " 님이 나갔습니다.";
				pw.println(chatstr);
				System.out.println("현재 " + map.size() + "명이 채팅중..");
				System.out.print("현재접속자: ");
				Iterator<String> nameIt = map.keySet().iterator();
				while (nameIt.hasNext()) {

					String str = nameIt.next();
					System.out.print(str + " ");
				}
				System.out.println("");

			}
		}

		public void sendToAll(String message) {
			// 메세지를모든접속자(HashMap)에게전송하기..

			Iterator<String> it = map.keySet().iterator();
			pw.println(message);

			message = checkPhishing(message);
			message = filter(message);
			while (it.hasNext()) {
				try {

					DataOutputStream dos = map.get(it.next());

					dos.writeUTF(message);

				} catch (Exception e) {

				}

			}
			System.out.println(message);

		}

		// 피싱 관련 문자열 체크
		public String checkPhishing(String msg) {
			boolean cleanOK = true; // 체크해 봤을 때 걸리지 않았으면 트루다.

			String token; // 배열에 들어있는 단어가 여러개니깐 하나씩 비교할때 쓴다.
			for (int i = 0; i < array.size(); i++) {
				token = array.get(i);
				if (msg.contains(token)) { // 이 메시지중에 배열에 포함된 단어가 있느냐?

					cleanOK = false;
					msg = msg.replace(token, "OO");

				}

			}
			if (cleanOK) {
				return msg;
			} else
				return "★ 피싱주의★ " + msg;

		}

		public String filter(String contents) {

			Pattern p = Pattern.compile("([0-9]{2,3})([0-9]{3,4})([0-9]{3,4})");
			Matcher m = p.matcher(contents);
			StringBuffer sb = new StringBuffer();
			String matchingStr = "";
			while (m.find()) {
				for (int i = 0; i < m.groupCount() + 1; i++) {
					// System.out.println(i + ":" + m.group(i));
				}
				m.appendReplacement(sb, m.group(1) + m.group(2) + "****");
			}
			m.appendTail(sb);
			return contents;

		}

	}

}